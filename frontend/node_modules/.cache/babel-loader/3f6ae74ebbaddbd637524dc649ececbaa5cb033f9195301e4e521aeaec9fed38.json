{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\nif (!supabaseUrl || !supabaseKey) {\n  throw new Error('Missing Supabase URL or Key. Ensure REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY are set in your environment variables.');\n}\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// --- Google Sign-In Function (for use in your components) ---\nexport const signInWithGoogle = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithOAuth({\n      provider: 'google'\n    });\n    if (error) {\n      console.error('Error signing in with Google:', error);\n      alert(`Error signing in with Google: ${error.message}`); // Basic error display\n      // Consider a more robust error handling mechanism in your UI\n      return {\n        error\n      }; // Return the error for the component to handle\n    } else {\n      console.log('Redirecting to Google for sign-in...');\n      // No need to do anything here, Supabase handles the redirect\n      return {\n        data\n      };\n    }\n  } catch (error) {\n    console.error(\"An unexpected error occurred:\", error);\n    alert(`An unexpected error occurred: ${error.message}`);\n    return {\n      error: {\n        message: \"An unexpected error occurred\"\n      }\n    };\n  }\n};\nexport default supabase;","map":{"version":3,"names":["createClient","supabaseUrl","process","env","REACT_APP_SUPABASE_URL","supabaseKey","REACT_APP_SUPABASE_ANON_KEY","Error","supabase","signInWithGoogle","data","error","auth","signInWithOAuth","provider","console","alert","message","log"],"sources":["C:/Users/thoma/Documents/Code/sb-digital-legacy-v2.1/frontend/src/supabaseClient.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\r\nconst supabaseKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('Missing Supabase URL or Key. Ensure REACT_APP_SUPABASE_URL and REACT_APP_SUPABASE_ANON_KEY are set in your environment variables.');\r\n}\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\n// --- Google Sign-In Function (for use in your components) ---\r\nexport const signInWithGoogle = async () => {\r\n  try {\r\n    const { data, error } = await supabase.auth.signInWithOAuth({\r\n      provider: 'google',\r\n    });\r\n\r\n    if (error) {\r\n      console.error('Error signing in with Google:', error);\r\n      alert(`Error signing in with Google: ${error.message}`); // Basic error display\r\n      // Consider a more robust error handling mechanism in your UI\r\n      return { error }; // Return the error for the component to handle\r\n    } else {\r\n      console.log('Redirecting to Google for sign-in...');\r\n      // No need to do anything here, Supabase handles the redirect\r\n      return { data };\r\n    }\r\n  } catch (error) {\r\n        console.error(\"An unexpected error occurred:\", error);\r\n        alert(`An unexpected error occurred: ${error.message}`);\r\n        return {error: {message: \"An unexpected error occurred\"}};\r\n  }\r\n};\r\n\r\nexport default supabase;\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACtD,MAAMC,WAAW,GAAGH,OAAO,CAACC,GAAG,CAACG,2BAA2B;AAE3D,IAAI,CAACL,WAAW,IAAI,CAACI,WAAW,EAAE;EAChC,MAAM,IAAIE,KAAK,CAAC,mIAAmI,CAAC;AACtJ;AAEA,MAAMC,QAAQ,GAAGR,YAAY,CAACC,WAAW,EAAEI,WAAW,CAAC;;AAEvD;AACA,OAAO,MAAMI,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAACC,eAAe,CAAC;MAC1DC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEF,IAAIH,KAAK,EAAE;MACTI,OAAO,CAACJ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDK,KAAK,CAAC,iCAAiCL,KAAK,CAACM,OAAO,EAAE,CAAC,CAAC,CAAC;MACzD;MACA,OAAO;QAAEN;MAAM,CAAC,CAAC,CAAC;IACpB,CAAC,MAAM;MACLI,OAAO,CAACG,GAAG,CAAC,sCAAsC,CAAC;MACnD;MACA,OAAO;QAAER;MAAK,CAAC;IACjB;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACVI,OAAO,CAACJ,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrDK,KAAK,CAAC,iCAAiCL,KAAK,CAACM,OAAO,EAAE,CAAC;IACvD,OAAO;MAACN,KAAK,EAAE;QAACM,OAAO,EAAE;MAA8B;IAAC,CAAC;EAC/D;AACF,CAAC;AAED,eAAeT,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}